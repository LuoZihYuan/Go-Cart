basePath: /v1
definitions:
  models.Error:
    properties:
      details:
        example: Product ID must be a positive integer
        type: string
      error:
        example: INVALID_INPUT
        type: string
      message:
        example: The provided input data is invalid
        type: string
    type: object
  models.Product:
    properties:
      category_id:
        example: 456
        minimum: 1
        type: integer
      manufacturer:
        example: Acme Corporation
        maxLength: 200
        minLength: 1
        type: string
      product_id:
        example: 12345
        minimum: 1
        type: integer
      sku:
        example: ABC-123-XYZ
        maxLength: 100
        minLength: 1
        type: string
      some_other_id:
        example: 789
        minimum: 1
        type: integer
      weight:
        example: 1250
        minimum: 0
        type: integer
    required:
    - category_id
    - manufacturer
    - product_id
    - sku
    - some_other_id
    - weight
    type: object
info:
  contact:
    email: support@example.com
    name: API Support
  description: API for managing products, shopping carts, warehouse operations, and
    credit card processing
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: E-commerce API
  version: 1.0.0
paths:
  /products/{productId}:
    get:
      consumes:
      - application/json
      description: Retrieve a product's details using its unique identifier
      operationId: getProduct
      parameters:
      - description: Product ID
        in: path
        minimum: 1
        name: productId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Product'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Get product by ID
      tags:
      - Products
  /products/{productId}/details:
    post:
      consumes:
      - application/json
      description: Add or update detailed information for a specific product
      operationId: addProductDetails
      parameters:
      - description: Product ID
        in: path
        minimum: 1
        name: productId
        required: true
        type: integer
      - description: Product details
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.Product'
      produces:
      - application/json
      responses:
        "204":
          description: Product details added successfully
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Add product details
      tags:
      - Products
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: X-API-Key
    type: apiKey
swagger: "2.0"
tags:
- description: Product management operations
  name: Products
- description: Shopping cart operations
  name: Shopping Cart
- description: Warehouse and inventory operations
  name: Warehouse
- description: Payment processing operations
  name: Payments
